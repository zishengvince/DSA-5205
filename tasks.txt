

Introduction
    LSTM                                            1
    SVM + Markowitz efficient frontier              2
    Genetic Algorithm                               3

Model
    Data                                            4
    Model Steps                                     5
    Result
        SVM + Markowitz efficient frontier          6
        Genetic Algorithm                           7

Analysis
    Conclusion                                      8
    Analysis                                        9




3>

Selection of the optimal parameters is challenging for machine learning, so our project try to use genetic algorithm to select stocks and allocate weights.


We use a binary string as the unit gene:
    5-bit binary string to represent the weight of one stock;
    100 stocks, so the gene length is 500 for an unit, which represents the weights of the 100 stocks.

Run genetic algorithm shown on the left to get the best unit:
    Best unit has the weights for the 100 stocks;
    Select 10 out of 100 stocks with biggest weights to construct the portfolio;
    Filter out those with negative expected return stocks from the 10 stocks to construct the final portfolio;
    The final portfolio in this case may have less than 10 stocks.

5>

LSTM + Genetic Algorithm
    Use LSTM model to predict the close price of NASDAQ100 underlying stocks in October;
    Pass the predicted price and return into genetic algorithm to get the component stocks and then calculate the weight of each stock;
    Use the real price and return of October to evaluate the performance of the above portfolio.

SVM + Markowitz efficient frontier
    Use historical known price and other fundamental information to predict the probability of going up for each stock;
    Choose 10 stocks with highest probability and then pass these 10 stocks into efficient frontier algorithm;
    Use historical known price and return of these 10 stocks as well as the efficient frontier model to get the weight of each stock;
    Use the real price and return of October to evaluate the performance of the above portfolio.


Introduction>

We used 2 independent methods to construct 2 different portfolios and compare the performance of these 2 portfolios.
    Algorithm based: LSTM + Genetic Algorithm;
    Relatively theory based: SVM + Markowitz efficient frontier;



Objective>

Create a portfolio of up to 10 stocks from NASDAQ100 underlying stocks by maximizing the sharpe ratio of the portfolio.


GA>

A genetic algorithm is a search heuristic that is inspired by Charles Darwinâ€™s theory of natural evolution. Genetic algorithms are commonly used to generate high-quality solutions to optimization and search problems by relying on biologically inspired operators such as mutation, crossover and selection.

The process of natural selection starts with the selection of fittest individuals from a population. They produce offspring which inherit the characteristics of the parents and will be added to the next generation. If parents have better fitness, their offspring will be better than parents and have a better chance at surviving. This process keeps on iterating and at the end, a generation with the fittest individuals will be found.


Advantages:
    GA search from a population of points, rather than a single point
    GA is good for "noisy" envrionments
    GA is robust with respect to local minima/maxima
Disadvantages:
    GA implementation is still an art
    GA requeries less information about the problem, but designing an objective function and getting the representation and operators right can be difficult.
    GA is computationally expensive i.e. time-consuming


LSTM+GA>

procedure:
    use 2021M10_Prediction to run the genetic algorithm;
    genetic algorithm will return a portforlio for 2021M10_Prediction data which maximizes the sharpe ratio;
    use the 2021M10_Real to evaluate the portfolio performance.

Algorithm details:

Gene design:
    use a binary string as the individual gene;
    I assigned 7-bit binary string to each underlying stock to represent its weight, so each individual has a 700-bit binary string as its gene;

Selection:
    decode gene for each individual: we have 100 stocks, each having 7-bit. Selected 10 stocks with highest weights to evaluate the individual;



